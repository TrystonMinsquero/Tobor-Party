#pragma kernel CSMain

Texture2D<float4> textureWorld;
Texture2D<float4> lightTexture;
StructuredBuffer<float2> bufferWorld;
StructuredBuffer<float> bufferIn;
RWStructuredBuffer<float> bufferOut;

[numthreads(1, 1, 1)]
void CSMain()
{
	float2 worldPos;
	float4 worldPixelColor;
	float4 lightPixelColor;
	float pixelLightDifference;
	float3 grayscaleMultiplier = float3(0.3, 0.59, 0.11);
	float grayColor = 0.5;

	int outLength = bufferIn[0];
	int itemPointsCount = bufferIn[1];

	int startIndex = 0;
	int pixelIndex = 0;

	for (int i = 0; i < outLength; i += 4, startIndex += itemPointsCount) {
		for (int j = 0; j < itemPointsCount; j++) {

			pixelIndex = startIndex + j;
			worldPos = bufferWorld[pixelIndex];

			if (worldPos.x > 0 && worldPos.y > 0) {
				worldPixelColor = textureWorld[worldPos];

				if (worldPixelColor.w < 1) {
					bufferOut[i]++;

					if (worldPixelColor.w > 0)
					{
						bufferOut[i + 1]++;
						bufferOut[i + 2] += worldPixelColor.w;
					}

					lightPixelColor = lightTexture[worldPos];

					pixelLightDifference = dot(lightPixelColor.xyz, grayscaleMultiplier) / grayColor;

					bufferOut[i + 3] += pixelLightDifference;
				}
			}
		}
	}
}